// DO NOT EDIT. AUTOGENERATED BY 'rv-runtime-generator'
use core::ptr::addr_of;
extern "C" {
    static _stext: usize;
    static _etext: usize;
    static _srodata: usize;
    static _erodata: usize;
    static _sdata: usize;
    static _edata: usize;
    static _sbss: usize;
    static _ebss: usize;
    static _sheap: usize;
    static _eheap: usize;
    static _scustom_section: usize;
    static _ecustom_section: usize;
    static _sstack: usize;
    static _estack: usize;
    static _sregion_1: usize;
    static _eregion_1: usize;
    static _sregion_2: usize;
    static _eregion_2: usize;
    static _ssubregion_1: usize;
    static _esubregion_1: usize;
    static _ssubregion_2: usize;
    static _esubregion_2: usize;
    static _sprogram: usize;
    static _eprogram: usize;
}
#[allow(dead_code, non_snake_case)]
pub fn text_region_start() -> usize {
    (addr_of!(_stext)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn text_region_end() -> usize {
    (addr_of!(_etext)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn text_region_size() -> usize {
    text_region_end() - text_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn rodata_region_start() -> usize {
    (addr_of!(_srodata)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn rodata_region_end() -> usize {
    (addr_of!(_erodata)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn rodata_region_size() -> usize {
    rodata_region_end() - rodata_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn data_region_start() -> usize {
    (addr_of!(_sdata)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn data_region_end() -> usize {
    (addr_of!(_edata)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn data_region_size() -> usize {
    data_region_end() - data_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn bss_region_start() -> usize {
    (addr_of!(_sbss)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn bss_region_end() -> usize {
    (addr_of!(_ebss)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn bss_region_size() -> usize {
    bss_region_end() - bss_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn heap_region_start() -> usize {
    (addr_of!(_sheap)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn heap_region_end() -> usize {
    (addr_of!(_eheap)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn heap_region_size() -> usize {
    heap_region_end() - heap_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn custom_section_region_start() -> usize {
    (addr_of!(_scustom_section)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn custom_section_region_end() -> usize {
    (addr_of!(_ecustom_section)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn custom_section_region_size() -> usize {
    custom_section_region_end() - custom_section_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn stack_region_start() -> usize {
    (addr_of!(_sstack)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn stack_region_end() -> usize {
    (addr_of!(_estack)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn stack_region_size() -> usize {
    stack_region_end() - stack_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn region_1_region_start() -> usize {
    (addr_of!(_sregion_1)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn region_1_region_end() -> usize {
    (addr_of!(_eregion_1)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn region_1_region_size() -> usize {
    region_1_region_end() - region_1_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn region_2_region_start() -> usize {
    (addr_of!(_sregion_2)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn region_2_region_end() -> usize {
    (addr_of!(_eregion_2)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn region_2_region_size() -> usize {
    region_2_region_end() - region_2_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn subregion_1_region_start() -> usize {
    (addr_of!(_ssubregion_1)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn subregion_1_region_end() -> usize {
    (addr_of!(_esubregion_1)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn subregion_1_region_size() -> usize {
    subregion_1_region_end() - subregion_1_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn subregion_2_region_start() -> usize {
    (addr_of!(_ssubregion_2)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn subregion_2_region_end() -> usize {
    (addr_of!(_esubregion_2)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn subregion_2_region_size() -> usize {
    subregion_2_region_end() - subregion_2_region_start()
}
#[allow(dead_code, non_snake_case)]
pub fn program_region_start() -> usize {
    (addr_of!(_sprogram)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn program_region_end() -> usize {
    (addr_of!(_eprogram)) as usize
}
#[allow(dead_code, non_snake_case)]
pub fn program_region_size() -> usize {
    program_region_end() - program_region_start()
}
extern "C" {
    fn __my_boot_id() -> usize;
}
#[allow(dead_code, non_snake_case)]
pub fn my_stack() -> (usize, usize) {
    unsafe {
        (stack_region_end() - 0x2000 * (__my_boot_id() + 1), 0x2000)
    }
}
