// DO NOT EDIT. AUTOGENERATED BY 'rv-runtime-generator'
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TpBlock {
    pub current_mode_sp: usize,
    pub interrupted_mode_sp: usize,
    pub interrupted_mode_tp: usize,
    pub rust_entrypoint: usize,
    pub boot_id: usize,
    pub hart_id: usize,
    pub curr_context: usize,
    pub return_addr: usize,
    pub rt_flags: usize,
    pub trap_ctx_frame: usize,
}
impl TpBlock {
    #[allow(dead_code, non_snake_case)]
    pub fn get_current_mode_sp(&self) -> usize {
        self.current_mode_sp
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_current_mode_sp(&mut self, val: usize) {
        self.current_mode_sp = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_interrupted_mode_sp(&self) -> usize {
        self.interrupted_mode_sp
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_interrupted_mode_sp(&mut self, val: usize) {
        self.interrupted_mode_sp = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_interrupted_mode_tp(&self) -> usize {
        self.interrupted_mode_tp
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_interrupted_mode_tp(&mut self, val: usize) {
        self.interrupted_mode_tp = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_rust_entrypoint(&self) -> usize {
        self.rust_entrypoint
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_rust_entrypoint(&mut self, val: usize) {
        self.rust_entrypoint = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_boot_id(&self) -> usize {
        self.boot_id
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_boot_id(&mut self, val: usize) {
        self.boot_id = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_hart_id(&self) -> usize {
        self.hart_id
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_hart_id(&mut self, val: usize) {
        self.hart_id = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_curr_context(&self) -> usize {
        self.curr_context
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_curr_context(&mut self, val: usize) {
        self.curr_context = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_return_addr(&self) -> usize {
        self.return_addr
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_return_addr(&mut self, val: usize) {
        self.return_addr = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_rt_flags(&self) -> usize {
        self.rt_flags
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_rt_flags(&mut self, val: usize) {
        self.rt_flags = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_trap_ctx_frame(&self) -> usize {
        self.trap_ctx_frame
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_trap_ctx_frame(&mut self, val: usize) {
        self.trap_ctx_frame = val;
    }
}
extern "C" {
    fn __my_boot_id() -> usize;
}
#[allow(dead_code, non_snake_case)]
pub fn my_boot_id() -> usize {
    unsafe {
        __my_boot_id()
    }
}
extern "C" {
    fn __my_hart_id() -> usize;
}
#[allow(dead_code, non_snake_case)]
pub fn my_hart_id() -> usize {
    unsafe {
        __my_hart_id()
    }
}
extern "C" {
    fn __my_trap_frame_addr() -> usize;
}
#[allow(dead_code, non_snake_case)]
pub fn my_trap_frame_addr() -> usize {
    unsafe {
        __my_trap_frame_addr()
    }
}
extern "C" {
    fn __my_tpblock_addr() -> usize;
}
#[allow(dead_code, non_snake_case)]
pub fn my_tpblock_addr() -> usize {
    unsafe {
        __my_tpblock_addr()
    }
}
extern "C" {
    fn __get_restore_tf_label() -> usize;
}
#[allow(dead_code, non_snake_case)]
pub fn get_restore_tf_label() -> usize {
    unsafe {
        __get_restore_tf_label()
    }
}
#[allow(dead_code, non_snake_case)]
pub fn my_tpblock_mut() -> &'static mut TpBlock {
    unsafe {
        &mut *(__my_tpblock_addr() as *mut TpBlock)
    }
}
extern "C" {
    fn __tpblock_base() -> usize;
}
#[allow(dead_code, non_snake_case)]
pub fn tp_block_slice() -> &'static [TpBlock] {
    unsafe {
        core::slice::from_raw_parts(__tpblock_base() as *const _,4)
    }
}
#[allow(dead_code, non_snake_case)]
pub fn boot_to_hart_id(id: usize) -> Option<usize> {
    for tp in tp_block_slice() {
        if tp.get_boot_id() == id {
            return Some(tp.get_hart_id());
        }
    }
    None
}
#[allow(dead_code, non_snake_case)]
pub fn hart_to_boot_id(id: usize) -> Option<usize> {
    for tp in tp_block_slice() {
        if tp.get_hart_id() == id {
            return Some(tp.get_boot_id());
        }
    }
    None
}
extern "C" {
    fn __switch_to(ctx: usize);
}
#[allow(dead_code, non_snake_case)]
pub fn switch_to(ctx: usize) {
    unsafe {
        __switch_to(ctx);
    }
}
