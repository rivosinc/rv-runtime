// DO NOT EDIT. AUTOGENERATED BY 'rv-runtime-generator'
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrapFrame {
    pub ra: usize,
    pub sp: usize,
    pub gp: usize,
    pub tp: usize,
    pub t0: usize,
    pub t1: usize,
    pub t2: usize,
    pub s0: usize,
    pub s1: usize,
    pub a0: usize,
    pub a1: usize,
    pub a2: usize,
    pub a3: usize,
    pub a4: usize,
    pub a5: usize,
    pub a6: usize,
    pub a7: usize,
    pub s2: usize,
    pub s3: usize,
    pub s4: usize,
    pub s5: usize,
    pub s6: usize,
    pub s7: usize,
    pub s8: usize,
    pub s9: usize,
    pub s10: usize,
    pub s11: usize,
    pub t3: usize,
    pub t4: usize,
    pub t5: usize,
    pub t6: usize,
    pub f0: usize,
    pub f1: usize,
    pub f2: usize,
    pub f3: usize,
    pub f4: usize,
    pub f5: usize,
    pub f6: usize,
    pub f7: usize,
    pub f8: usize,
    pub f9: usize,
    pub f10: usize,
    pub f11: usize,
    pub f12: usize,
    pub f13: usize,
    pub f14: usize,
    pub f15: usize,
    pub f16: usize,
    pub f17: usize,
    pub f18: usize,
    pub f19: usize,
    pub f20: usize,
    pub f21: usize,
    pub f22: usize,
    pub f23: usize,
    pub f24: usize,
    pub f25: usize,
    pub f26: usize,
    pub f27: usize,
    pub f28: usize,
    pub f29: usize,
    pub f30: usize,
    pub f31: usize,
    pub mstatus: usize,
    pub mepc: usize,
    pub mtval: usize,
    pub mcause: usize,
    pub fcsr: usize,
    pub rt_flags: usize,
    pub int_frame: usize,
}
impl TrapFrame {
    #[allow(dead_code, non_snake_case)]
    pub fn get_ra(&self) -> usize {
        self.ra
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_ra(&mut self, val: usize) {
        self.ra = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_sp(&self) -> usize {
        self.sp
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_sp(&mut self, val: usize) {
        self.sp = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_gp(&self) -> usize {
        self.gp
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_gp(&mut self, val: usize) {
        self.gp = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_tp(&self) -> usize {
        self.tp
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_tp(&mut self, val: usize) {
        self.tp = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_t0(&self) -> usize {
        self.t0
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_t0(&mut self, val: usize) {
        self.t0 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_t1(&self) -> usize {
        self.t1
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_t1(&mut self, val: usize) {
        self.t1 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_t2(&self) -> usize {
        self.t2
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_t2(&mut self, val: usize) {
        self.t2 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s0(&self) -> usize {
        self.s0
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s0(&mut self, val: usize) {
        self.s0 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s1(&self) -> usize {
        self.s1
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s1(&mut self, val: usize) {
        self.s1 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a0(&self) -> usize {
        self.a0
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a0(&mut self, val: usize) {
        self.a0 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a1(&self) -> usize {
        self.a1
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a1(&mut self, val: usize) {
        self.a1 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a2(&self) -> usize {
        self.a2
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a2(&mut self, val: usize) {
        self.a2 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a3(&self) -> usize {
        self.a3
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a3(&mut self, val: usize) {
        self.a3 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a4(&self) -> usize {
        self.a4
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a4(&mut self, val: usize) {
        self.a4 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a5(&self) -> usize {
        self.a5
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a5(&mut self, val: usize) {
        self.a5 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a6(&self) -> usize {
        self.a6
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a6(&mut self, val: usize) {
        self.a6 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_a7(&self) -> usize {
        self.a7
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_a7(&mut self, val: usize) {
        self.a7 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s2(&self) -> usize {
        self.s2
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s2(&mut self, val: usize) {
        self.s2 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s3(&self) -> usize {
        self.s3
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s3(&mut self, val: usize) {
        self.s3 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s4(&self) -> usize {
        self.s4
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s4(&mut self, val: usize) {
        self.s4 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s5(&self) -> usize {
        self.s5
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s5(&mut self, val: usize) {
        self.s5 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s6(&self) -> usize {
        self.s6
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s6(&mut self, val: usize) {
        self.s6 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s7(&self) -> usize {
        self.s7
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s7(&mut self, val: usize) {
        self.s7 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s8(&self) -> usize {
        self.s8
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s8(&mut self, val: usize) {
        self.s8 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s9(&self) -> usize {
        self.s9
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s9(&mut self, val: usize) {
        self.s9 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s10(&self) -> usize {
        self.s10
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s10(&mut self, val: usize) {
        self.s10 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_s11(&self) -> usize {
        self.s11
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_s11(&mut self, val: usize) {
        self.s11 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_t3(&self) -> usize {
        self.t3
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_t3(&mut self, val: usize) {
        self.t3 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_t4(&self) -> usize {
        self.t4
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_t4(&mut self, val: usize) {
        self.t4 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_t5(&self) -> usize {
        self.t5
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_t5(&mut self, val: usize) {
        self.t5 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_t6(&self) -> usize {
        self.t6
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_t6(&mut self, val: usize) {
        self.t6 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f0(&self) -> usize {
        self.f0
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f0(&mut self, val: usize) {
        self.f0 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f1(&self) -> usize {
        self.f1
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f1(&mut self, val: usize) {
        self.f1 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f2(&self) -> usize {
        self.f2
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f2(&mut self, val: usize) {
        self.f2 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f3(&self) -> usize {
        self.f3
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f3(&mut self, val: usize) {
        self.f3 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f4(&self) -> usize {
        self.f4
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f4(&mut self, val: usize) {
        self.f4 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f5(&self) -> usize {
        self.f5
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f5(&mut self, val: usize) {
        self.f5 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f6(&self) -> usize {
        self.f6
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f6(&mut self, val: usize) {
        self.f6 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f7(&self) -> usize {
        self.f7
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f7(&mut self, val: usize) {
        self.f7 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f8(&self) -> usize {
        self.f8
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f8(&mut self, val: usize) {
        self.f8 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f9(&self) -> usize {
        self.f9
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f9(&mut self, val: usize) {
        self.f9 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f10(&self) -> usize {
        self.f10
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f10(&mut self, val: usize) {
        self.f10 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f11(&self) -> usize {
        self.f11
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f11(&mut self, val: usize) {
        self.f11 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f12(&self) -> usize {
        self.f12
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f12(&mut self, val: usize) {
        self.f12 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f13(&self) -> usize {
        self.f13
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f13(&mut self, val: usize) {
        self.f13 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f14(&self) -> usize {
        self.f14
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f14(&mut self, val: usize) {
        self.f14 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f15(&self) -> usize {
        self.f15
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f15(&mut self, val: usize) {
        self.f15 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f16(&self) -> usize {
        self.f16
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f16(&mut self, val: usize) {
        self.f16 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f17(&self) -> usize {
        self.f17
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f17(&mut self, val: usize) {
        self.f17 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f18(&self) -> usize {
        self.f18
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f18(&mut self, val: usize) {
        self.f18 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f19(&self) -> usize {
        self.f19
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f19(&mut self, val: usize) {
        self.f19 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f20(&self) -> usize {
        self.f20
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f20(&mut self, val: usize) {
        self.f20 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f21(&self) -> usize {
        self.f21
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f21(&mut self, val: usize) {
        self.f21 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f22(&self) -> usize {
        self.f22
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f22(&mut self, val: usize) {
        self.f22 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f23(&self) -> usize {
        self.f23
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f23(&mut self, val: usize) {
        self.f23 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f24(&self) -> usize {
        self.f24
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f24(&mut self, val: usize) {
        self.f24 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f25(&self) -> usize {
        self.f25
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f25(&mut self, val: usize) {
        self.f25 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f26(&self) -> usize {
        self.f26
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f26(&mut self, val: usize) {
        self.f26 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f27(&self) -> usize {
        self.f27
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f27(&mut self, val: usize) {
        self.f27 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f28(&self) -> usize {
        self.f28
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f28(&mut self, val: usize) {
        self.f28 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f29(&self) -> usize {
        self.f29
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f29(&mut self, val: usize) {
        self.f29 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f30(&self) -> usize {
        self.f30
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f30(&mut self, val: usize) {
        self.f30 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_f31(&self) -> usize {
        self.f31
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_f31(&mut self, val: usize) {
        self.f31 = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_mstatus(&self) -> usize {
        self.mstatus
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_mstatus(&mut self, val: usize) {
        self.mstatus = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_mepc(&self) -> usize {
        self.mepc
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_mepc(&mut self, val: usize) {
        self.mepc = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_mtval(&self) -> usize {
        self.mtval
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_mtval(&mut self, val: usize) {
        self.mtval = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_mcause(&self) -> usize {
        self.mcause
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_mcause(&mut self, val: usize) {
        self.mcause = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_fcsr(&self) -> usize {
        self.fcsr
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_fcsr(&mut self, val: usize) {
        self.fcsr = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_rt_flags(&self) -> usize {
        self.rt_flags
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_rt_flags(&mut self, val: usize) {
        self.rt_flags = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn get_int_frame(&self) -> usize {
        self.int_frame
    }
    #[allow(dead_code, non_snake_case)]
    pub fn set_int_frame(&mut self, val: usize) {
        self.int_frame = val;
    }
    #[allow(dead_code, non_snake_case)]
    pub fn reset(&mut self) {
        self.set_ra(0);
        self.set_sp(0);
        self.set_gp(0);
        self.set_tp(0);
        self.set_t0(0);
        self.set_t1(0);
        self.set_t2(0);
        self.set_s0(0);
        self.set_s1(0);
        self.set_a0(0);
        self.set_a1(0);
        self.set_a2(0);
        self.set_a3(0);
        self.set_a4(0);
        self.set_a5(0);
        self.set_a6(0);
        self.set_a7(0);
        self.set_s2(0);
        self.set_s3(0);
        self.set_s4(0);
        self.set_s5(0);
        self.set_s6(0);
        self.set_s7(0);
        self.set_s8(0);
        self.set_s9(0);
        self.set_s10(0);
        self.set_s11(0);
        self.set_t3(0);
        self.set_t4(0);
        self.set_t5(0);
        self.set_t6(0);
        self.set_f0(0);
        self.set_f1(0);
        self.set_f2(0);
        self.set_f3(0);
        self.set_f4(0);
        self.set_f5(0);
        self.set_f6(0);
        self.set_f7(0);
        self.set_f8(0);
        self.set_f9(0);
        self.set_f10(0);
        self.set_f11(0);
        self.set_f12(0);
        self.set_f13(0);
        self.set_f14(0);
        self.set_f15(0);
        self.set_f16(0);
        self.set_f17(0);
        self.set_f18(0);
        self.set_f19(0);
        self.set_f20(0);
        self.set_f21(0);
        self.set_f22(0);
        self.set_f23(0);
        self.set_f24(0);
        self.set_f25(0);
        self.set_f26(0);
        self.set_f27(0);
        self.set_f28(0);
        self.set_f29(0);
        self.set_f30(0);
        self.set_f31(0);
        self.set_mstatus(0);
        self.set_mepc(0);
        self.set_mtval(0);
        self.set_mcause(0);
        self.set_fcsr(0);
        self.set_rt_flags(0);
        self.set_int_frame(0);
    }
}
#[allow(dead_code, non_snake_case)]
pub fn trapframe() -> &'static mut TrapFrame {
    unsafe {
        &mut *(super::my_trap_frame_addr() as *mut TrapFrame)
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone)]
#[allow(dead_code, non_snake_case)]
pub enum RtFlags {
    RestoreTrapFrameInTpBlock = 0x1,
    FsStateWasDirty = 0x2,
    TranslationRegChanged = 0x4,
}
