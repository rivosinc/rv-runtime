// SPDX-FileCopyrightText: 2025 Rivos Inc.
//
// SPDX-License-Identifier: Apache-2.0

use std::cell::RefCell;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

#[derive(Debug, Eq, PartialEq)]
pub enum BlockDelimiter {
    None,
    Parens,
}

impl BlockDelimiter {
    fn open(&self) -> &str {
        match self {
            Self::None => "",
            Self::Parens => " {",
        }
    }

    fn close(&self) -> &str {
        match self {
            Self::None => "",
            Self::Parens => "}",
        }
    }
}

#[derive(Debug)]
pub struct FileWriter {
    filepath: PathBuf,
    block_depth: RefCell<usize>,
    block_delimiter: BlockDelimiter,
    contents: RefCell<String>,
}

const BLOCK_SPACE_MULTIPLIER: usize = 4;

impl FileWriter {
    pub fn new(filepath: PathBuf, block_delimiter: BlockDelimiter) -> Self {
        Self {
            filepath,
            block_depth: RefCell::new(0),
            block_delimiter,
            contents: RefCell::new(String::new()),
        }
    }

    pub fn new_block(&self, block_prefix: &str) {
        self.add_line(&format!(
            "{:#}{:#}",
            block_prefix,
            self.block_delimiter.open()
        ));
        *self.block_depth.borrow_mut() += 1;
    }

    pub fn end_block(&self) {
        *self.block_depth.borrow_mut() -= 1;
        self.add_line(self.block_delimiter.close());
    }

    pub fn end_block_with_suffix(&self, block_suffix: &str) {
        *self.block_depth.borrow_mut() -= 1;
        self.add_line(&format!(
            "{:#} {:#}",
            self.block_delimiter.close(),
            block_suffix
        ));
    }

    fn add_to_contents(&self, line: &str, align_count: usize) {
        let mut contents = self.contents.borrow_mut();
        contents.push_str(&format!("{}{}\n", " ".repeat(align_count), line));
    }

    pub fn add_line(&self, line: &str) {
        self.add_to_contents(line, *self.block_depth.borrow() * BLOCK_SPACE_MULTIPLIER);
    }

    pub fn goto_next_line(&self) {
        self.add_to_contents("", 0);
    }

    pub fn write(&self) -> std::io::Result<()> {
        let mut file = File::create(&self.filepath)?;
        file.write_all(self.contents.borrow().as_bytes())
    }

    pub fn label(&self, label: &str) {
        self.add_to_contents(&format!("{label:#}:"), 0);
        if self.block_delimiter == BlockDelimiter::None {
            *self.block_depth.borrow_mut() = 1;
        }
    }
}

pub fn auto_generate_banner() -> String {
    format!("DO NOT EDIT. AUTOGENERATED BY '{}'", env!("CARGO_PKG_NAME"))
}
